- case: signal_object_types
  main: |
    from psygnal import SignalGroupDescriptor
    from dataclasses import dataclass
    from typing import ClassVar

    @dataclass
    class T:
        x: int = 0
        e: ClassVar[SignalGroupDescriptor] = SignalGroupDescriptor()

    t = T()
    reveal_type(T.e)    # N: Revealed type is "psygnal._group_descriptor.SignalGroupDescriptor"
    reveal_type(t.e)    # N: Revealed type is "psygnal._group.SignalGroup"
    reveal_type(t.e['x'])  # N: Revealed type is "psygnal._signal.SignalInstance"
    reveal_type(t.e.x)     # N: Revealed type is "psygnal._signal.SignalInstance"

    @t.e['x'].connect
    def func(x: int) -> None:
        pass

    reveal_type(func)  # N: Revealed type is "def (x: builtins.int)"

    @t.e.x.connect
    def func2(x: int) -> None:
        pass

    reveal_type(func2)  # N: Revealed type is "def (x: builtins.int)"

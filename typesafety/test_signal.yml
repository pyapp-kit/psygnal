- case: signal_object_types
  main: |
    from psygnal import Signal

    class T:
        s = Signal()

    t = T()
    reveal_type(T.s)  # N: Revealed type is "psygnal._signal.Signal"
    reveal_type(t.s)  # N: Revealed type is "psygnal._signal.SignalInstance"

- case: signal_params
  main: |
    from psygnal import Signal
    from inspect import Signature
    s = Signal()
    s = Signal(int, str)
    s = Signal(object)
    s = Signal(Signature())
    s = Signal(1) # ER: Argument 1 to "Signal" has incompatible type "int"; .*

- case: signal_connection
  main: |
    from psygnal import SignalInstance
    from typing import Any
    s = SignalInstance()

    def a(x: int, y: str) -> Any: ...
    x = s.connect(a)
    reveal_type(x)  # N: Revealed type is "def (x: builtins.int, y: builtins.str) -> Any"

    @s.connect
    def b(x: str) -> int: return 1
    reveal_type(b)  # N: Revealed type is "def (x: builtins.str) -> builtins.int"

    def c(x: int, y: str) -> Any: ...
    y = s.connect(c, check_nargs=False)
    reveal_type(y)  # N: Revealed type is "def (x: builtins.int, y: builtins.str) -> Any"

    @s.connect(check_nargs=False)
    def d(x: str) -> None: ...

    reveal_type(d)  # N: Revealed type is "def (x: builtins.str)"
